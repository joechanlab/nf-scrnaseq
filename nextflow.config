params {
    samplesheet = "./data/sampleSheet.csv"
    experiment.name = "nf-scrnaseq"
    aggregation = true
    atac = false
    cellbender.skip = false
    remove_doublets = false
    remove_outliers = false
    scvi.n_latent = 50
    scvi.n_top_genes = 1000
    postprocessing.n_pca_components = 100
    postprocessing.n_diffmap_components = 20
    postprocessing.metadata = ""
    postprocessing.leiden_res = 1.8
    report.plot = ""
    seacells.n_SEACells = 25
    seacells.build_kernel_on = "X_pca"
    seacells.n_waypoint_eigs = 10
    mount = "/data1,/home,/scratch"
    outdir = "results"
    with_gpu = false
    max_memory = "20.GB"
    max_cpus = 3
    max_time = "6.h"
    maxForks = 2
}

includeConfig 'conf/base.config'

profiles {
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    apptainer{
        apptainer.enabled = true
        docker.enabled = false
        apptainer.autoMounts = true
    }
    singularity{
        singularity.enabled = true
        docker.enabled = false
        singularity.autoMounts = true
        withLabel: 'gpus' {
            containerOptions = "--nv --bind ${params.mount}"
        }
    }
    lilac{
        singularity.enabled = true
        docker.enabled = false
        singularity.autoMounts = true
        singularity.runOptions = '--nv'
        process {
            executor = 'lsf'
            queue = 'cpuqueue'
            cpus = params.max_cpus
            time = params.max_time
            memory = params.max_memory
            withLabel: 'gpus' {
                queue = 'gpuqueue'
                clusterOptions = '-gpu "num=1"'
            }
        }
    }
    iris{
        singularity.enabled = true
        docker.enabled = false
        singularity.autoMounts = true
        conda.enabled = true
        process {
            executor = 'slurm'
            queue = 'chanj3'
            cpus = params.max_cpus
            time = params.max_time
            memory = params.max_memory
            withLabel: 'gpus' {
                queue = 'chanj3'
                clusterOptions = '--gpus=1'
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
